# Generated by Django 5.2.2 on 2025-06-14 14:09
from django.db import migrations, models
def migrate_ai_models(apps, schema_editor):
    # 获取所有需要迁移的模型
    model_classes = {
        'GroqTranslator': 'translator.GroqTranslator',
        'MoonshotAITranslator': 'translator.MoonshotAITranslator',
        'OpenRouterAITranslator': 'translator.OpenRouterAITranslator',
        'TogetherAITranslator': 'translator.TogetherAITranslator',
    }

    # 获取OpenAI模型和Feed模型
    OpenAITranslator = apps.get_model('translator', 'OpenAITranslator')
    Feed = apps.get_model('core', 'Feed')
    ContentType = apps.get_model('contenttypes', 'ContentType')


    # 遍历所有需要迁移的模型
    for model_name, app_label in model_classes.items():
        try:
            # 尝试获取旧模型
            OldModel = apps.get_model(*app_label.split('.'))
        except LookupError:
            continue  # 如果模型不存在则跳过

        # 迁移翻译器数据
        for old_translator in OldModel.objects.all():
            # 创建新的OpenAI翻译器实例
            new_translator = OpenAITranslator.objects.create(
                name=old_translator.name,
                valid=old_translator.valid,
                is_ai=old_translator.is_ai,
                api_key=old_translator.api_key,
                base_url=old_translator.base_url,
                model=old_translator.model,
                translate_prompt=old_translator.translate_prompt,
                # content_translate_prompt=old_translator.content_translate_prompt, # Use the default prompt
                temperature=old_translator.temperature,
                top_p=old_translator.top_p,
                frequency_penalty=old_translator.frequency_penalty,
                presence_penalty=old_translator.presence_penalty,
                max_tokens=old_translator.max_tokens,
                summary_prompt=old_translator.summary_prompt
            )
            new_translator.save()
            new_content_type = ContentType.objects.get_for_model(new_translator)
            old_content_type = ContentType.objects.get_for_model(old_translator)
            # 查找关联旧模型的Feed,并更新翻译器
            Feed.objects.filter(
                translator_content_type=old_content_type,
                translator_object_id=old_translator.id
            ).update(
                translator_content_type=new_content_type,
                translator_object_id=new_translator.id
            )

            Feed.objects.filter(
                summarizer_content_type=old_content_type,
                summarizer_object_id=old_translator.id
            ).update(
                summarizer_content_type=new_content_type,
                summarizer_object_id=new_translator.id
            )

class Migration(migrations.Migration):
    dependencies = [
        ('core', '0001_initial'),
        ('translator', '0042_delete_azureaitranslator_delete_caiyuntranslator_and_more'),
    ]

    operations = [
        migrations.AlterField(
            model_name='openaitranslator',
            name='content_translate_prompt',
            field=models.TextField(default='\nYou are a professional, authentic translation engine specialized in HTML content translation. \n\nRequirements:\n1. Translate only the text content into {target_language}\n2. Preserve ALL HTML tags, attributes, and structure completely unchanged\n3. Maintain proper context awareness across different HTML elements and their relationships\n4. Consider semantic meaning within nested tags and their hierarchical context\n5. Ensure translated text fits naturally within the HTML structure\n6. Keep inline elements (like <span>, <a>, <strong>) contextually coherent with their surrounding text\n7. Maintain consistency in terminology throughout the entire HTML document\n8. Return only the translated HTML content without explanations or comments\n\nImportant: Do not modify, remove, or alter any HTML tags, attributes, classes, IDs, or structural elements. Only translate the actual text content between tags.\n\n', verbose_name='Content Translate Prompt'),
        ),
        migrations.RunPython(migrate_ai_models),
    ]